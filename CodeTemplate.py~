# getting data, importing images and unzipping #
import os
import zipfile

local_zip = '/desktop/Images/Turbulence_Images.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/desktop/Images/Turbulence_Images')
local_zip = 'desktop/Images/Validation_Turbulence_Images.zip'
zip_red = zipfile.ZipFile(local_zip, 'r')
zip_re.extractall('desktop/Images/Validation_Turbulence_Images')
zip_ref.close()

# Directory with no noise training images
train_no_noise = os.path.join('/desktop/Images/Turbulence_Images/no_noise')

# Directory with noise images
train_noise = os.path.join('/desktop/Images/Turbulence_Images/noise')

# Directory with  validation no noise images
validation_no_noise = os.path.join('/desktop/Images/validation_Turbulence_Images/validation_no_noise')

# Directory with validation noise images

validation_noise = os.path.join('/desktop/Images/validation_Turbulence_Images/validation_noise')

### Building Model ###

import tenorflow as tf
import numpy as np
from tensorflow import keras
from tensorflow.python.keras.layers import Dense
from tensorflow.python.keras.models import Sequential

model = tf.keras.models.Sequential([
# desired size 150x150 with 3 byes of color
# first convolution, 3x3 filter, and 2x2 pooling
    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(150, 150, 3)),
	 tf.keras.layers.MaxPooling2D(2,2),
# second convolution, 3x3 filter, and 2x2 pooling
	 tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
	 tf.keras.layers.MaxPooling2D(2,2),
# third convolution, 3x3 filter, and 2x2 pooling
	 tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
	 tf.keras.layers.MaxPooling2D(2,2),
# fourth convolution, 3x3 filter, and 2x2 pooling
	 tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
	 tf.keras.layers.MaxPooling2D(2,2),

# Flatten results for DNN
    tf.keras.layers.Flatten(),
# 512 neuron hidden layer
	 tf.keras.layers.Dense(512, activation='relu')

# 1 neuron output, sigmoid: 1 for 'no_filter', 0 for 'filter'
    tf.keras.layers.Dense(1, activation = 'sigmoid')
])

# model summary
model.summary()


